void borrowBook(FILE *fpUser, FILE *fpBook, User *user)
{
    userHeader();
    showAvailBooks(fpBook);
    printf("\nBorrow Book\n");
    char temp[7];
    int exists = 0;
    int book_idx = 0;
    do
    {
        printf("Checking bookshelf status:\n");
        for (int i = 0; i < 3; i++)
        {
            printf("Slot %d: %s\n", i, user->books[i] == NULL ? "Empty" : "Occupied");
        }
        printf("Insert book id (Enter 0 to cancel): ");
        scanf("%[^\n]", temp);
        getchar();
        if (strcmp(temp, "0") != 0)
        {
            for (int i = 0; i < 100 && books[i] != NULL; i++)
            {
                if (strcmp(temp, books[i]->id) == 0)
                {
                    book_idx = i;
                    exists = 1;
                    break;
                }
            }
        }
        else
        {
            break;
        }
        if (exists == 0)
        {
            printf("Failed to find book by id, please try again\n\n");
            SLEEP(1000);
        }
    } while (exists == 0);
    if (exists == 1)
    {
        if (books[book_idx]->isBorrowed == 0)
        {
            int noSpace = 1;
            for (int i = 0; i < 3; i++)
            {
                if (user->books[i] == NULL)
                {
                    user->books[i] = (Book *)malloc(sizeof(Book));
                    noSpace = 0;
                    memcpy(user->books[i], books[book_idx], sizeof(Book));
                    break;
                }
            }

            SLEEP(1000);
            if (noSpace == 1)
            {
                printf("Failed to borrow book, please empty your bookshelf\n\n");
                SLEEP(1000);
                return;
            }
            getBooks(fpBook);
            books[book_idx]->isBorrowed = 1;
            resetFile("book.dat");
            for (int i = 0; i < 100 && books[i] != NULL; i++)
            {
                fwrite(books[i], sizeof(Book), 1, fpBook);
            }
            getUsers(fpUser);
            if (fpUser == NULL)
            {
                printf("Error resetting user data file.\n");
                return;
            }

            for (int i = 0; i < 100 && users[i] != NULL; i++)
            {
                if (strcmp(users[i]->username, user->username) == 0)
                {
                    fwrite(user, sizeof(User), 1, fpUser); // Write updated user data
                }
                else
                {
                    fwrite(users[i], sizeof(User), 1, fpUser); // Write other users as is
                }
            }
            printf("Book with ID %s borrowed successfully.\n", temp);
        }
    }
    printf("Press enter to continue\n");
    getchar();
}